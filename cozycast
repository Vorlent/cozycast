#!/bin/bash
source .env


function setup_env {
    mkdir -p data
    FILE=/etc/resolv.conf
    if [ -f "data/TURN_SECRET" ]; then
        export TURN_SECRET=$(cat data/TURN_SECRET)
    else
        export TURN_SECRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 128 | head -n 1)
        echo $TURN_SECRET > data/TURN_SECRET
    fi

    export KURENTO_USERNAME=2139323074:kurento
    export KURENTO_PASSWORD=$(echo -n "$KURENTO_USERNAME" | openssl dgst -sha1 -hmac "$TURN_SECRET" -binary | base64)

    if [ -z "$KURENTO_IP" ]; then
        export KURENTO_IP=$(sudo docker network inspect cozycast_cozycast --format="{{(index (index .).IPAM.Config 0).Gateway}}")
    fi

    if [ -f "data/COZYCAST_JWT_SECRET" ]; then
        export COZYCAST_JWT_SECRET=$(cat data/COZYCAST_JWT_SECRET)
    else
        export COZYCAST_JWT_SECRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 256 | head -n 1)
        echo $COZYCAST_JWT_SECRET > data/COZYCAST_JWT_SECRET
    fi

    if [ -f "data/COZYCAST_DB_PASS" ]; then
        export COZYCAST_DB_PASS=$(cat data/COZYCAST_DB_PASS)
    else
        export COZYCAST_DB_PASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
        echo $COZYCAST_DB_PASS > data/COZYCAST_DB_PASS
    fi

    if [ -f "data/COZYCAST_INIT_ADMIN_PASSWORD" ]; then
        export COZYCAST_INIT_ADMIN_PASSWORD=$(cat data/COZYCAST_INIT_ADMIN_PASSWORD)
    else
        export COZYCAST_INIT_ADMIN_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
        echo $COZYCAST_INIT_ADMIN_PASSWORD > data/COZYCAST_INIT_ADMIN_PASSWORD
    fi

    if [ -f "data/COZYCAST_WORKER_KEY" ]; then
        export COZYCAST_WORKER_KEY=$(cat data/COZYCAST_WORKER_KEY)
    else
        export COZYCAST_WORKER_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
        echo $COZYCAST_WORKER_KEY > data/COZYCAST_WORKER_KEY
    fi

    export COMPOSE_COMPATIBILITY=true
}
setup_env

function coturn_add_kurento_user {
    sudo -E docker exec -it cozycast_coturn_1 \
        turnadmin -a -u kurento -p $KURENTO_PASSWORD -r kurento.org
}

function liquibase_update {
    echo "liquibase update"
    sudo docker run --rm -it \
        -v $(readlink -f ../liquibase/changelog.xml):/liquibase/changelog.xml \
        -v $(readlink -f ../liquibase/driver):/liquibase/jdbc \
        --network cozycast_cozycast \
        liquibase/liquibase:4.23 \
        --driver=org.postgresql.Driver \
        --classpath /liquibase/jdbc/postgresql-42.2.9.jre7.jar \
        --url="jdbc:postgresql://$COZYCAST_DB_HOST:5432/cozycast" \
        --changeLogFile=changelog.xml \
        --username=cozycast \
        --password=$COZYCAST_DB_PASS \
        update
    echo "liquibase finished"
}

case $1 in
    start)
        mkdir -p cozycast-server/cache/avatar
        cd docker-compose
        sudo -E docker-compose -p cozycast -f docker-compose.worker.yml -f docker-compose.yml up -d
        coturn_add_kurento_user
        liquibase_update
        exit;
        ;;
    stop)
        cd docker-compose
        sudo -E docker-compose -p cozycast -f docker-compose.worker.yml -f docker-compose.yml down
        exit;
        ;;
    connect)
        cd docker-compose
        while IFS=',' read -r server roomname key https
        do
            if [ -z "$server" ] || [ -z "$roomname" ] || [ -z "$key" ] || [ -z "$https" ]; then
                echo "Error: Missing one or more required variables (server, roomname, key, https) in the input file."
                echo "Example: example_server,example_room,example_key,true"
                exit 1
            fi
            export DUCKDNS_DOMAIN=$server
            export COZYCAST_ROOM=$roomname
            export COZYCAST_WORKER_KEY=$key
            export FORCE_HTTPS=$https

            sudo -E docker-compose -p cozycast_room_$roomname -f docker-compose.worker.yml -f docker-compose.connect.yml up -d cozycast-worker
            sleep 5

        done < ../.rooms
        exit;
        ;;
    disconnect)
        # Get the list of running container names
        container_names=$(sudo docker ps --format '{{.Names}}')

        # Stop containers with names starting with "cozycast_room_"
        for name in $container_names; do
            if [[ $name == cozycast_room_* ]]; then
                sudo docker stop "$name"
            fi
        done
        exit;
        ;;
    build)
        cd docker-compose
        sudo -E docker-compose -p cozycast -f docker-compose.worker.yml -f docker-compose.yml build
        exit;
        ;;
    dev)
        mkdir -p cozycast-server/cache/avatar
        cd docker-compose
        export SOURCE_URL=$(git remote get-url origin)
        sudo -E docker-compose -p cozycast -f docker-compose.worker.yml -f docker-compose.yml -f docker-compose.dev.yml up -d
        coturn_add_kurento_user
        liquibase_update
        (sudo -E docker exec -i cozycast-server sh dev.sh) &
        exit;
        ;;
    db)
        sudo docker exec -it cozycast_postgres_1 psql -U cozycast
        exit;
        ;;
    ssl)
        case $2 in
            certbot)
                sudo -E docker run --rm -it -p 80:80 -v $(realpath data/certbot-http):/etc/letsencrypt/ certbot/certbot \
                    --server https://acme-v02.api.letsencrypt.org/directory \
		    -d $DUCKDNS_DOMAIN \
		    -d $SECOND_DOMAIN \
		    --standalone \
		    --preferred-chain "ISRG Root X1" \
		    --preferred-challenges http-01 certonly
		#acme-staging-v02
                exit;
                ;;
            renew)
                # --force-renewal
                RELOAD_TRIGGER=./data/certbot-http/RELOAD
                sudo rm -rf $RELOAD_TRIGGER
                sudo -E docker run --rm -it \
		    -p 80:80 \
                    -v $(realpath data/certbot-http):/etc/letsencrypt/  \
                    -v $(realpath cozycast):/cozycast \
                    -v $(realpath .env):/opt/certbot/.env \
                    cozycast-certbot \
		    --preferred-chain "ISRG Root X1" \
                    renew --server https://acme-v02.api.letsencrypt.org/directory \
		    --preferred-challenges http-01 \
		    --deploy-hook "touch /etc/letsencrypt/RELOAD"
                        #--preferred-challenges dns-01 \
                        #--manual-auth-hook="sh /cozycast ssl duckdns \$CERTBOT_VALIDATION" \
                        #--manual-cleanup-hook="sh /cozycast ssl duckdns clear \$CERTBOT_VALIDATION" \
                        #--deploy-hook "touch /etc/letsencrypt/RELOAD"

                if test -f "$RELOAD_TRIGGER"; then
                    echo "$RELOAD_TRIGGER exists."
                    ./cozycast ssl keystore $DUCKDNS_DOMAIN
                    if [ -z ${SSL_SERVER_RESTART+x} ]; then
			 echo "sudo docker restart cozycast-server";
		    else
			sudo docker restart cozycast-server
		    fi
                    sudo rm -rf $RELOAD_TRIGGER
                fi
                exit
                ;;
            duckdns)
                if [ "$3" == "clear" ]; then
                    TXT_SECRET=$4
                    curl "https://www.duckdns.org/update?domains=$DUCKDNS_DOMAIN&token=$DUCKDNS_TOKEN&txt=$TXT_SECRET&clear=true"
                else
                    TXT_SECRET=$3
                    curl "https://www.duckdns.org/update?domains=$DUCKDNS_DOMAIN&token=$DUCKDNS_TOKEN&txt=$TXT_SECRET"
                fi
                sleep 60
                exit;
                ;;
            keystore)
		PARAM_DOMAIN=$3
                DIRECTORY=$(sudo -E realpath data/certbot-http/live/$PARAM_DOMAIN)
                echo $DIRECTORY
                if test -z "$CHAIN_FILE"; then
                    CHAIN_FILE="fullchain.pem"
                fi
                sudo -E openssl pkcs12 -export \
                         -in $DIRECTORY/cert.pem \
                         -inkey $DIRECTORY/privkey.pem \
                         -out $DIRECTORY/server.p12 \
                         -CAfile $DIRECTORY/$CHAIN_FILE -chain \
                         -name $PARAM_DOMAIN \
                         -passout 'env:KEYSTORE_PASSWORD'
                exit;
                ;;
            *)
                printf "Usage: $0 $1: <certbot|duckdns|keystore|reload>\n"
                printf "\n"
                printf "    certbot   Request certificate via certbot\n"
                printf "    duckdns   Update TXT record of duckdns domain \n"
                printf "    keystore  Convert certificate to .p12 keystore \n"
                exit 2
                ;;
        esac
        ;;
    *)
        printf "Usage: %s: <start|stop|build|dev|db|connect|disconnect>\n" $0
        printf "\n"
        printf "    start        Starts cozycast containers with the latest docker image\n"
        printf "    stop         Stops all cozycast containers\n"
        printf "    build        Builds all cozycast docker images\n"
        printf "    dev          Start cozycast in live edit mode\n"
        printf "    db           Connect to postgres via psql\n"
        printf "    connect      Starts workers defined in the .rooms file\n"
        printf "    disconnect   Stops workers defined in the .rooms file\n"
        exit 2
        ;;
esac
